@page "/Przepis/{Nazwa}"

@inject kuchnia.Service.RecepturaService RecepturaService

<h3>Szczegóły przepis: @Nazwa</h3>

@if (przepis == null)
{
    <p>Ładowanie szczegółów...</p>
}
else
{
    <h4>@przepis.nazwa</h4>
    <h4>@przepis.Kategoria</h4>

    <h5>Składniki:</h5>
    <ul>
        @foreach (var s in przepis.skladniki)
        {
            <li>@s</li>
        }
    </ul>

    <h5>Sposób przygotowania:</h5>
    <ul>
        @foreach (var z in przepis.sposob_przygotowania)
        {
            <li>@z</li>
        }
    </ul>

    <h5>Temperatura pieczenia:</h5>
    <p>@przepis.Temperatura_pieczenia</p>

    <h5>Czas pieczenia:</h5>
    <p>@przepis.Czas_pieczenia</p>
}

@code {
    [Parameter]
    public string Nazwa { get; set; }

    private kuchnia.Service.Przepis przepis;

    protected override async Task OnInitializedAsync()
    {
        var url = "https://raw.githubusercontent.com/bobeer2406/kuchnia/main/kuchnia/data/Przepisy.json";
        var wszystkieReceptury = await RecepturaService.PobierzPrzepisAsync(url);

        var decodedName = Uri.UnescapeDataString(Nazwa ?? string.Empty);

        przepis = wszystkieReceptury.FirstOrDefault(r =>
            string.Equals(Normalize(r.nazwa), Normalize(decodedName), StringComparison.OrdinalIgnoreCase));
    }

    private string Normalize(string input)
    {
        if (string.IsNullOrEmpty(input)) return string.Empty;
        var formD = input.Normalize(System.Text.NormalizationForm.FormD);
        var chars = formD.Where(c => System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c) != System.Globalization.UnicodeCategory.NonSpacingMark).ToArray();
        return new string(chars).Normalize(System.Text.NormalizationForm.FormC);
    }
}
