@inject kuchnia.Service.RecepturaService RecepturaService
@page "/Receptura"

<h3>Wybierz recepturę</h3>

@if (receptury == null)
{
    <p>Ładowanie danych...</p>
}
else if (receptury.Count == 0)
{
    <p>Brak receptur do wyświetlenia.</p>
}
else
{
    <select @onchange="OnRecepturaChanged" class="form-select">
        <option value="">-- Wybierz recepturę --</option>
        @foreach (var r in receptury)
        {
            <option value="@r.nazwa">@r.nazwa</option>
        }
    </select>

    @if (wybranaReceptura != null)
    {
        <hr />
        <h4>@wybranaReceptura.nazwa</h4>

        <h5>Składniki:</h5>
        <ul>
            @foreach (var s in wybranaReceptura.skladniki)
            {
                <li>@s</li>
            }
        </ul>

        <h5>Zalewa:</h5>
        <ul>
            @foreach (var z in wybranaReceptura.zalewa)
            {
                <li>@z</li>
            }
        </ul>

        <h5>Przygotowanie:</h5>
        <p>@wybranaReceptura.przygotowanie</p>
    }
}

@code {
    private List<kuchnia.Service.Receptura> receptury;
    private kuchnia.Service.Receptura wybranaReceptura;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string url = "https://raw.githubusercontent.com/bobeer2406/kuchnia/refs/heads/main/kuchnia/data/Receptury.json";
            receptury = await RecepturaService.PobierzRecepturyAsync(url);
        }
        catch (Exception ex)
        {
            // możesz dodać obsługę błędu, np. logowanie lub wyświetlenie komunikatu
        }
    }

    private void OnRecepturaChanged(ChangeEventArgs e)
    {
        var nazwa = e.Value?.ToString();
        wybranaReceptura = receptury.FirstOrDefault(r => r.nazwa == nazwa);
    }
}
